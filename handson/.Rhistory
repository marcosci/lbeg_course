germany_bor$borders = st_length(germany_bor)
View(arrange(germany_bor, borders))
germany_bor = st_cast(germany, "MULTILINESTRING")
germany_bor
germany_bor %>%
mutate(borders = st_length(geometry))
germany_bor %>%
mutate(borders = st_length(geometry)) %>%
View(arrange(germany_bor, borders))
germany_bor %>%
mutate(borders = st_length(geometry)) %>%
View(arrange(., borders))
germany_bor %>%
mutate(borders = st_length(geometry)) %>%
arrange(borders) %>%
View()
nds_cent
bw_cent
ger_cent
st_distance(nds_cent, ger_cent)
st_distance(bw_cent, ger_cent)
rbind(nds_cent, bw_cent, ger_cent)
st_distance(rbind(nds_cent, bw_cent, ger_cent))
# NDVI berechnen
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
multi_rast = rast(multi_raster_file)
ndvi_fun = function(nir, red){
(nir - red) / (nir + red)
}
ndvi_rast = lapp(multi_rast[[c(4, 3)]], fun = ndvi_fun)
ndvi_rast
plot(ndvi_rast)
install.packages("spDataLarge", repos = "https://geocompr.r-universe.dev")
system.file("raster/landsat.tif", package = "spDataLarge")
# NDVI berechnen
multi_raster_file = system.file("raster/landsat.tif", package = "spDataLarge")
multi_raster_file
rast(multi_raster_file)
# Lies die Datei raster/nlcd.tif aus dem Paket spDataLarge ein.
# Welche Art von Informationen kannst du über die Eigenschaften dieser Datei erhalten?
nlcd_file = system.file("raster/nlcd.tif", package = "spDataLarge")
nlcd_file
nlcd_file
nlcd_rast = rast(nlcd_file)
nlcd_rast
plot(nlcd_rast)
res(nlcd_rast)
nlyr(nlcd_rast)
ext(nlcd_rast)
ras_bbox <- ext(nlcd_rast)
ras_bbox
dim(nlcd_rast)
# Lese das srtm.tif in R ein (srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))).
# Das Raster hat eine Auflösung von 0.00083 by 0.00083 Grad.
# Ändere die Auflösung zu 0.01 x 0.01 Grad (mit mehreren Methoden).
# Plotte die  Ergebnisse.
# Fallen dir unterschiede auf?
srtm = rast(system.file("raster/srtm.tif", package = "spDataLarge"))
srtm
rast_template = rast(ext(srtm), res = 0.01)
rast_template
srtm
srtm
res(srtm)
con <- dbConnect(odbc::odbc(), .connection_string = "driver={SQL Server};
server= {SQLSDEL1};
database={NIBIS_KLIMA_TEST};
UID = {BGR\\Hajati.M};
trusted_conncetion=yes")
con <- DBI::dbConnect(odbc::odbc(), .connection_string = "driver={SQL Server};
server= {SQLSDEL1};
database={NIBIS_KLIMA_TEST};
UID = {BGR\\Hajati.M};
trusted_conncetion=yes")
install.packages("odbc")
# Hands-on: Erstellen von Tabellen mit GT
library(gt)
tab_1 <- mpg %>%
gt()
tab_1
mpg %>%
select(model, drv, cty) %>%
gt_preview()
# Titel und Untertitel als character
mpg %>%
select(model, drv, displ) %>%
slice(1:5) %>%
gt() %>%
tab_header(
title = "Data listing from mpg",
subtitle = "mpg is an R dataset"
)
mpg %>%
select(model, drv, displ) %>%
slice(1:5) %>%
gt() %>%
tab_header(
title = md("Data listing from **mpg**"),
subtitle = md("`mpg` is an R dataset")
)
mpg %>%
select(model, drv, displ) %>%
slice(1:5) %>%
gt() %>%
tab_header(
title = md("Data listing from **mpg**"),
subtitle = md("`mpg` is an R dataset")
) %>%
tab_source_note(
source_note = md("Reference: EPA fuel economy data (1999-2008)")
)
mpg %>%
select(model, drv, displ) %>%
slice(1:5) %>%
gt() %>%
tab_header(
title = md("Data listing from **mpg**"),
subtitle = md("`mpg` is an R dataset")
) %>%
tab_source_note(
source_note = md("Reference: EPA fuel economy data (1999-2008)")
) %>%
tab_footnote(
footnote = "Hubraum in Liter",
locations = cells_column_labels(
columns = vars(drv))
)
gtcars %>%
select(
-mfr, -trim, bdy_style, drivetrain,
-drivetrain, -trsmn, -ctry_origin
) %>%
slice(1:8) %>%
gt() %>%
tab_spanner(
label = "performance",
columns = vars(
hp, hp_rpm, trq, trq_rpm,
mpg_c, mpg_h)
)
iris %>%
group_by(Species) %>%
slice(1:4) %>%
gt() %>%
tab_spanner_delim(delim = ".")
gtcars %>%
select(model, year, hp, trq) %>%
slice(1:8) %>%
gt() %>%
tab_row_group(
group = "powerful",
rows = hp <= 600
) %>%
tab_row_group(
group = "super powerful",
rows = hp > 600
)
gtcars %>%
select(model, year, hp, trq) %>%
slice(1:5) %>%
gt(rowname_col = "model") %>% # rowname_col = "model"
tab_stubhead(label = "car")
mpg %>%
select(model, drv, displ,cty) %>%
slice(1:8) %>%
gt() %>%
tab_header(
title = md("Data listing from **mpg**"),
subtitle = md("`mpg` is an R dataset")
) %>%
tab_source_note(
source_note = md("Reference: EPA fuel economy data (1999-2008)")
) %>%
tab_footnote(
footnote = "Hubraum in Liter",
locations = cells_column_labels(
columns = vars(displ))
) %>%
tab_style(
style = list(
cell_fill(color = "#8856a7"),
cell_text(weight = "bold")
),
locations = cells_body(
columns = vars(displ),
rows = displ > 2.0)
) %>%
tab_style(
style = list(
cell_fill(color = "#9ebcda"),
cell_text(style = "italic")
),
locations = cells_body(
columns = vars(cty),
rows = cty >= 20)
)
exibble %>%
gt() %>%
fmt_number(
columns = vars(num),
decimals = 3,
use_seps = FALSE
)
# large number suffixing
countrypops %>%
select(country_code_3, year, population) %>%
filter(
country_code_3 %in% c(
"CHN", "IND", "USA", "PAK", "IDN")
) %>%
filter(year > 1975 & year %% 5 == 0) %>%
spread(year, population) %>%
arrange(desc(`2015`)) %>%
gt(rowname_col = "country_code_3") %>%
fmt_number(
columns = 2:9,
decimals = 2,
suffixing = TRUE
)
# scientific format
exibble %>%
gt() %>%
fmt_number(
columns = vars(num),
rows = num > 500,
decimals = 1,
scale_by = 1/1000,
pattern = "{x}K" # formatting pattern, value is presented by {x}
) %>%
fmt_scientific(
columns = vars(num),
rows = num <= 500,
decimals = 1
)
# format currency
exibble %>%
gt() %>%
fmt_currency(
columns = vars(currency),
currency = "EUR"
)
countrypops %>%
filter(country_name == "Mongolia") %>%
select(-contains("code")) %>%
tail(10) %>%
gt() %>%
data_color(
columns = vars(year),
colors = scales::col_numeric(
palette = c(
"red", "orange", "green", "blue"),
domain = c(2008, 2017))
)
countrypops %>%
select(-contains("code")) %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_align(
align = "center",
columns = vars(country_name)
)
countrypops %>%
select(-contains("code")) %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_align(
align = "left",
columns = vars(population)
) %>%
cols_width(
vars(country_name) ~ px(120),
ends_with("r") ~ px(100),
starts_with("pop") ~ px(120),
TRUE ~ px(60) # alles was noch übrig bleibt
)
countrypops %>%
select(-contains("code")) %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_align(
align = "left",
columns = vars(population)
) %>%
cols_width(
vars(country_name) ~ px(120),
ends_with("r") ~ px(100),
starts_with("pop") ~ px(120),
TRUE ~ px(60) # alles was noch übrig bleibt
) %>%
cols_label(
country_name = "Name",
year = "Year",
population = md("**Population**")
)
countrypops %>%
select(-contains("code")) %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_align(
align = "left",
columns = vars(population)
) %>%
cols_width(
vars(country_name) ~ px(120),
ends_with("r") ~ px(100),
starts_with("pop") ~ px(120),
TRUE ~ px(60) # alles was noch übrig bleibt
) %>%
cols_label(
country_name = "Name",
year = "Year",
population = md("**Population**")
) %>%
cols_move_to_end(columns = vars(year, country_name)) # cols_move_to_end() als Gegenteil
countrypops %>%
select(-contains("code")) %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_align(
align = "left",
columns = vars(population)
) %>%
cols_width(
vars(country_name) ~ px(120),
ends_with("r") ~ px(100),
starts_with("pop") ~ px(120),
TRUE ~ px(60) # alles was noch übrig bleibt
) %>%
cols_label(
country_name = "Name",
year = "Year",
population = md("**Population**")
) %>%
cols_move(
columns = vars(population),
before = vars(country_name) # alternative: before
)
countrypops %>%
filter(country_name == "Mongolia") %>%
tail(5) %>%
gt() %>%
cols_hide(columns = vars(country_code_2, country_code_3))
gtcars %>%
select(model, starts_with("mpg")) %>%
slice(1:8) %>%
gt() %>%
cols_merge_range(
col_begin = vars(mpg_c),
col_end = vars(mpg_h)
) %>%
cols_label(mpg_c = md("*MPG*"))
exibble %>%
select(currency, num) %>%
slice(1:7) %>%
gt() %>%
fmt_number(
columns = vars(num),
decimals = 3,
use_seps = FALSE
) %>%
cols_merge_uncert(
col_val = vars(currency),
col_uncert = vars(num)
) %>%
cols_label(currency = "value + uncert.")
mpg %>%
filter(manufacturer == "audi") %>%
select(model,manufacturer, displ, cty, hwy) %>%
gt(rowname_col = "manufacturer", groupname_col = "model") %>%
summary_rows(
groups = TRUE,
columns = vars(displ, cty, hwy),
fns = list(
min = ~min(.),
max = ~max(.),
avg = ~mean(.)
),
formatter = fmt_number,
decimals = 1,
use_seps = FALSE
)
mpg %>%
filter(manufacturer == "audi") %>%
select("model",manufacturer, displ, cty, hwy) %>%
gt(rowname_col = "manufacturer", groupname_col = "model") %>%
grand_summary_rows(
columns = vars(displ, cty, hwy),
fns = list(
min = ~min(.),
max = ~max(.),
avg = ~mean(.)),
formatter = fmt_number,
decimals = 1,
use_seps = FALSE
)
# gtsave()
tab_1 <-
gtcars %>%
dplyr::select(model, year, hp, trq) %>%
dplyr::slice(1:5) %>%
gt(rowname_col = "model") %>%
tab_stubhead(label = "car")
tab_1 %>% gtsave("tab_1.html")
tab_1 %>% gtsave("tab_1.pdf", path = "~")
tab_1 %>% gtsave("tab_1.png", zoom = 2.5, expand = 10)
# raw html
tab_html <-
gtcars %>%
dplyr::select(mfr, model, msrp) %>%
dplyr::slice(1:5) %>%
gt() %>%
tab_header(
title = md("Data listing from **gtcars**"),
subtitle = md("`gtcars` is an R dataset")
) %>%
as_raw_html()
tab_html %>%
substr(1, 700) %>%
cat()
# latex file
tab_latex <-
gtcars %>%
dplyr::select(mfr, model, msrp) %>%
dplyr::slice(1:5) %>%
gt() %>%
tab_header(
title = md("Data listing from **gtcars**"),
subtitle = md("`gtcars` is an R dataset")
) %>%
as_latex()
tab_latex
tab_latex %>%
as.character() %>%
cat()
summary_extracted <-
sp500 %>%
dplyr::filter(date >= "2015-01-05" & date <="2015-01-30") %>%
dplyr::arrange(date) %>%
dplyr::mutate(week = paste0("W", strftime(date, format = "%V"))) %>%
dplyr::select(-adj_close, -volume) %>%
gt(rowname_col = "date", groupname_col = "week") %>%
summary_rows(
groups = TRUE,
columns = vars(open, high, low, close),
fns = list(
min = ~min(.),
max = ~max(.),
avg = ~mean(.)
),
formatter = fmt_number,
use_seps = FALSE
) %>%
extract_summary()
summary_extracted
summary_extracted %>%
unlist(recursive = FALSE) %>%
dplyr::bind_rows() %>%
gt()
p1 <- mtcars %>%
head(5) %>%
gt()
p2 <- mtcars %>%
tail(5) %>%
gt()
p1 %>%
gtsave("p11.png")
library(cowplot)
p111 <- ggdraw() + draw_image("p11.png", scale = 0.8)
install.packages("cowplot")
p111 <- ggdraw() + draw_image("p11.png", scale = 0.8)
library(cowplot)
p111 <- ggdraw() + draw_image("p11.png", scale = 0.8)
p1 %>%
gtsave("p11.png")
# Hands-on: Erstellen von Tabellen mit GT
library(gt)
library(dplyr)
p1 %>%
gtsave("p11.png")
library(cowplot)
p1 <- mtcars %>%
head(5) %>%
gt()
p1 %>%
gtsave("p11.png")
webshot::install_phantomjs()
p1 %>%
gtsave("p11.png")
p111 <- ggdraw() + draw_image("p11.png", scale = 0.8)
library(patchwork)
library(ggplot)
p2 <-  mtcars %>%
head(5) %>%
ggplot() +
geom_point()
library(ggplot)
library(ggplot2)
mtcars %>%
head(5)
p2 <-  mtcars %>%
head(5) %>%
ggplot(aes(mpg, hp)) +
geom_point()
p2
p2 + p222
p2 + p111
rmarkdown::render_site()
