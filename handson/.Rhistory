geom_point(size = 6)
ggplot(mpg, aes(displ, hwy, color = class, shape = class)) +
geom_point(size = 6)
# Farbe pro Klasse
ggplot(mpg, aes(displ, hwy, color = class, shape = class)) +
geom_point(size = 2)
ggplot(mpg, aes(displ, hwy, color = class, shape = class)) +
geom_point(size = 2) +
scale_color_viridis_d()
# Farbe für alle Daten
ggplot(mpg, aes(displ, hwy, color = "red")) +
geom_point(size = 6)
ggplot(mpg, aes(displ, hwy)) +
geom_point(aes(color = class,
shape = drv),
size= 4,
alpha = 0.8) +
geom_smooth(aes(col=class), method="lm", se=F)
ggplot(economics, aes(date, unemploy)) +
geom_line(linetype = "dotdash")
ggplot(economics, aes(date, unemploy)) +
geom_line(linetype = 6)
ggplot(mpg, aes(class, hwy)) +
geom_col(width = .5)
ggplot(mpg, aes(class, hwy)) +
geom_col(width = .1)
ggplot(mpg, aes(class, hwy)) +
geom_col(width = 3.1)
ggplot(mpg, aes(class, hwy)) +
geom_col(width = 2.1)
ggplot(mpg, aes(class, hwy)) +
geom_col(width = 1.1)
# Multiple geoms in einem Plot --------------------------------------------
ggplot(mpg, aes(displ, hwy)) +
geom_point() +
geom_line()
ggplot(mpg, aes(displ, hwy))
# Reihenfolge der Geoms ist wichtig
ggplot(mpg, aes(displ, hwy)) +
geom_line(size=2) +
geom_point(color="red", size = 6)
ggplot(mpg, aes(displ, hwy)) +
geom_point(color="red", size = 6) +
geom_line(size=2)
# Plots in Collage einbetten ----------------------------------------------
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp))
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear))
p1
p2
p1 + p2
p1 / p2
p3 <- ggplot(mtcars) + geom_smooth(aes(disp, qsec))
p4 <- ggplot(mtcars) + geom_bar(aes(carb))
p1 + p2 + p3 + p4
p1 + p2 + p3 + p4 + plot_annotation(tag_levels = 'A')
p1 + p2 + p3 + p4 + plot_annotation(tag_levels = 'a')
p1 + p2 + p3 + p4 + plot_annotation(tag_levels = 'i')
p1 + p2 + p3 + p4 + plot_annotation(tag_levels = '1')
(p1 | p2 | p3) /
p4
##### Plotting ----
# Geodaten einlesen und ersten Blick draufwerfen
seismic <- st_read("data/seismic.geojson")
glimpse(seismic)
view(seismic)
# Wir ändern die Projektion zu Web Mercator
seismic <- seismic %>%
st_transform("EPSG:3857")
# Was ist die Projektion?
st_crs(seismic)
# ... und zurück zu WGS84
seismic <- seismic %>%
st_transform("EPSG:4326")
# Was ist die Projektion?
st_crs(seismic)
ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange),
size = 0) +
ggtitle("Wrong:") +
scale_fill_brewer(palette = "Reds",
name = "% chance") +
coord_sf(crs = "EPSG:5070",
default_crs = "EPSG:4326") +
theme_void()
seismic$ValueRange
unique(seismic$ValueRange)
# ValueRange
seismic <- seismic %>%
mutate(ValueRange_Factor = factor(ValueRange,
levels = c("< 1","1 - 2","2 - 5","5 - 10","10 - 14")))
seismic
st_drop_geometry(seismic)
as_tibble(st_drop_geometry(seismic))
p2 <- ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange_Factor),
size = 0) +
ggtitle("Correct:") +
scale_fill_brewer(palette = "Reds",
name = "% chance") +
coord_sf(crs = "EPSG:5070",
default_crs = "EPSG:4326") +
theme_void()
# make a map of the annual risk of experiencing a damaging quake in the continental US
p1 <- ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange),
size = 0) +
ggtitle("Wrong:") +
scale_fill_brewer(palette = "Reds",
name = "% chance") +
coord_sf(crs = "EPSG:5070",
default_crs = "EPSG:4326") +
theme_void()
p1 / p2
ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange_Factor),
size = 0)
ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange_Factor),
size = 0) +
ggtitle("Correct:")
ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange_Factor),
size = 0) +
ggtitle("Correct:") +
scale_fill_brewer(palette = "Reds",
name = "% chance")
ggplot() +
geom_sf(data = seismic,
aes(fill = ValueRange_Factor),
size = 0) +
ggtitle("Correct:") +
scale_fill_brewer(palette = "Reds",
name = "% chance") +
coord_sf(crs = "EPSG:5070",
default_crs = "EPSG:4326") +
theme_void()
germany
##### Geometry Operations
# Wir laden Deutschland als Vektordaten
load(system.file("extdata/DEU.rda", package="rdwd"))
germany <- st_as_sf(DEU)
germany
plot(st_geometry(germany))
germany_bor <- st_cast(germany, "MULTILINESTRING")
plot(st_geometry(germany_bor))
germany_bor
germany_bor %>%
mutate(borders = st_length(geometry))
germany_bor %>%
mutate(borders = st_length(geometry)) %>%
arrange(borders)
germany_bor %>%
mutate(borders = st_length(geometry)) %>%
arrange(borders) %>%
View()
library(terra)
# Lies die Datei raster/nlcd.tif aus dem Paket spDataLarge ein.
# Welche Art von Informationen kannst du über die Eigenschaften dieser Datei erhalten?
nlcd_file = system.file("raster/nlcd.tif", package = "spDataLarge")
"data/dgm.tif"
nlcd_rast = rast(nlcd_file)
nlcd_rast
nlcd_rast[]
mean(nlcd_rast[])
mean(values(nlcd_rast))
global(nlcd_rast, mean)
# NDVI berechnen
multi_raster_file <- system.file("raster/landsat.tif", package = "spDataLarge")
multi_rast <- rast(multi_raster_file)
global(multi_rast, mean)
multi_rast
rast(nrow = 9,
ncol = 9,
res = 0.5,
xmin = 0,
xmax = 4.5,
ymin = 0,
ymax = 4.5,
vals = rnorm(81))
rast(nrow = 9,
ncol = 9,
res = 0.5,
vals = rnorm(81))
rast(nrow = 9,
ncol = 9,
res = 0.5,
vals = rnorm(81))
rast(nrow = 9,
ncol = 9,
xmin = 0,
xmax = 4.5,
ymin = 0,
ymax = 4.5,
vals = rnorm(81))
rast(nrow = 9,
ncol = 9,
xmin = 0,
xmax = 9,
ymin = 0,
ymax = 9,
vals = rnorm(81))
r <- rast(nrow = 9,
ncol = 9,
xmin = 0,
xmax = 9,
ymin = 0,
ymax = 9)
r[]
r[] <- rnorm(81)
r
values(r)
r <- rast(nrow = 9,
ncol = 9,
xmin = 0,
xmax = 9,
ymin = 0,
ymax = 9)
values(r)
rnorm(81)
str_length(x)
library(stringr)
str_length("abc")
x <- c("abcdef", "ghifjk")
str_length(x)
lengths(regmatches(x, gregexpr("y", x)))
# Wir können Zeichenketten auch sortieren:
x <- c("y", "i", "k")
str_order(x)
# Wie oft kommt ein Zeichen vor?
str_count(x, "y")
lengths(regmatches(x, gregexpr("y", x)))
# Pattern Matching:
my_string <- "xxxx10yyyy"
my_expression <- "[0-9]+"
str_locate(my_string, my_expression)
my_expression <- "[0-9]"
str_locate(my_string, my_expression)
my_expression <- "10"
str_locate(my_string, my_expression)
str_extract(my_string, my_expression)
# Tobias ----
library(readxl)
library(dplyr)
library(ggplot2)
monatlich_A_2004_2011 <- read_excel("data/monatlich_A_2004_2011.xlsx")
View(monatlich_A_2004_2011)
monatlich_A_2004_2011 %>%
select(-ID) %>%
pivot_wider(names_from = Curve, values_from = Y)
monatlich_A_2004_2011 %>%
filter(Curve %in% c(2312430, 3110350)) %>%
ggplot(aes(X, Y)) +
geom_point() +
facet_wrap(vars(Curve))
sf::st_distance()
# Robin ----
library(sf)
library(terra)
library(exactextractr)
library(ggplot2)
library(classInt)
bkfifty_poly <- st_read("BK50_Polygone.shp")
cop_hannover <- rast("Copernicus_VersGrad_2018_extract_Hannover.tif")
bkfifty_poly$mean_versiegelung <- exact_extract(cop_hannover, bkfifty_poly, 'mean')
ggplot(bkfifty_poly, aes(fill = mean_versiegelung), lwd = 0) +
geom_sf(size = 0.03) +
#scale_fill_brewer(palette = "Pastel1",
#                   name = "% Versiegelung") +
scale_fill_viridis_c(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
mapview::mapview(bkfifty_poly %>% select(geometry, versiegelung_class))
bkfifty_poly_union <- bkfifty_poly %>%
group_by(versiegelung_class) %>%
summarise(prozent_versiegelt = mean(mean_versiegelung))
ggplot(bkfifty_poly_union, aes(fill = versiegelung_class)) +
geom_sf(size = 0.03) +
scale_fill_brewer(palette = "Pastel1",
name = "% Versiegelung") +
#scale_fill_viridis_d(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
# Jan ----
library(readxl)
bkfifty_poly <- st_read("BK50_Polygone.shp")
bkfifty_poly <- st_read("data/BK50_Polygone.shp")
cop_hannover <- rast("data/Copernicus_VersGrad_2018_extract_Hannover.tif")
bkfifty_poly$mean_versiegelung <- exact_extract(cop_hannover, bkfifty_poly, 'mean')
ggplot(bkfifty_poly, aes(fill = mean_versiegelung), lwd = 0) +
geom_sf(size = 0.03) +
#scale_fill_brewer(palette = "Pastel1",
#                   name = "% Versiegelung") +
scale_fill_viridis_c(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
mapview::mapview(bkfifty_poly %>% select(geometry, versiegelung_class))
bkfifty_poly_union <- bkfifty_poly %>%
group_by(versiegelung_class) %>%
summarise(prozent_versiegelt = mean(mean_versiegelung))
ggplot(bkfifty_poly_union, aes(fill = versiegelung_class)) +
geom_sf(size = 0.03) +
scale_fill_brewer(palette = "Pastel1",
name = "% Versiegelung") +
#scale_fill_viridis_d(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
bkfifty_poly_union <- bkfifty_poly %>%
group_by(versiegelung_class) %>%
summarise(prozent_versiegelt = mean(mean_versiegelung))
breaks <- classIntervals(bkfifty_poly$mean_versiegelung, n=10, style="fixed",
fixedBreaks=c(0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100))
bkfifty_poly$versiegelung_class <- cut(bkfifty_poly$mean_versiegelung, data.frame(breaks[2])[,1])
bkfifty_poly<-bkfifty_poly[complete.cases(bkfifty_poly$versiegelung_class),]
ggplot(bkfifty_poly, aes(fill = mean_versiegelung), lwd = 0) +
geom_sf(size = 0.03) +
#scale_fill_brewer(palette = "Pastel1",
#                   name = "% Versiegelung") +
scale_fill_viridis_c(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
bkfifty_poly_union <- bkfifty_poly %>%
group_by(versiegelung_class) %>%
summarise(prozent_versiegelt = mean(mean_versiegelung))
ggplot(bkfifty_poly_union, aes(fill = versiegelung_class)) +
geom_sf(size = 0.03) +
scale_fill_brewer(palette = "Pastel1",
name = "% Versiegelung") +
#scale_fill_viridis_d(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_void()
# Jan ----
library(readxl)
library(dplyr)
library(ggplot2)
verschlämmung <- read_excel("Sachdaten_Verschlämmung.xlsx") %>%
filter(OTIEF == 0)
verschla <- read_excel("Sachdaten_Verschlämmung.xlsx",
sheet = "VERSCHLA")
sachdaten <- left_join(verschlämmung, verschla, "HNBOD")
peine <- st_read("BK50_Peine.shp")
verschlämmung <- read_excel("Sachdaten_Verschlämmung.xlsx") %>%
filter(OTIEF == 0)
verschlämmung <- read_excel("data/Sachdaten_Verschlämmung.xlsx") %>%
filter(OTIEF == 0)
verschla <- read_excel("data/Sachdaten_Verschlämmung.xlsx",
sheet = "VERSCHLA")
sachdaten <- left_join(verschlämmung, verschla, "HNBOD")
peine <- st_read("BK50_Peine.shp")
peine_verschlämmung <- left_join(peine, sachdaten, by = c("OBJECTID" = "FL_NR"))
peine <- st_read("data/BK50_Peine.shp")
peine_verschlämmung <- left_join(peine, sachdaten, by = c("OBJECTID" = "FL_NR"))
ggplot(peine_verschlämmung, aes(fill = STUFE)) +
geom_sf(size = 0.03) +
scale_fill_viridis_c(option = "E", na.value="transparent") +
coord_sf(crs = "EPSG:4326") +
theme_minimal()
# Gabi ----
library(terra)
library(tidyverse)
elevation_raster <- rast(system.file("ex/elev.tif", package="terra"))
elevation_df <- as.data.frame(elevation_raster)
elevation_df$group <- 1
ggplot(elevation_df, aes(x = group, y = elevation)) +
geom_boxplot() +
stat_summary(fun=mean, geom="point", size=4, color="red", fill="red") +
theme_minimal()
multi_raster_file <- system.file("raster/landsat.tif", package = "spDataLarge")
multi_rast <- rast(multi_raster_file)
boxplot(multi_rast)
# Lena ----
library(readxl)
library(dplyr)
lena_df <- read_excel("data/Beispieldaten.xlsx")
lena_df %>%
group_by(GWK) %>%
select(-GRID_ID) %>%
summarise_all(mean, na.rm = TRUE)
# Tina ----
load("/Users/marco/Downloads/MKWDv_test.RData")
fao <- as_tibble(FAO_monthly) %>% head(10000)
regnie <- as_tibble(REGNIE_korr_monthly) %>% head(10000)
kwb <- fao %>%
left_join(regnie, by = "ID") %>%
left_join(XY_FAO_monthly)
library(sf)
plot(st_as_sf(as_tibble(XY_FAO_monthly), coords = c("XCOORD_CENTROID", "YCOORD_CENTROID")))
m <- as_tibble(XY_FAO_monthly) %>%
rename(x = XCOORD_CENTROID, y = YCOORD_CENTROID, z = ID) %>%
select(x,y,z)
library(DBI)
library(dplyr)
library(plyr)
library(tidyverse)
load("~/Downloads/MKWDv_v3_red.RData")
MKWDv
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(., kKWDm=cumsum(KWDm))
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm))
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(MONAT)
lag(1:5, n = 1)
lead(1:5, n = 1)
lead(1:5, n = 1)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = (KWDm + dplyr::lead(KWDm)) / 2)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = (KWDm + dplyr::lead(KWDm)) * 2)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = (KWDm + dplyr::lead(KWDm)) / 2)
9.16 + 28.5
9.16 + 28.5 / 2
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = (KWDm + lead(KWDm)) / 2)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = lead(KWDm))
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm),
month_after = lead(KWDm))
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_by(ID, JAHR, MONAT) %>%
mutate(month_after = (kKWDm + lead(kKWDm)) / 2)
18.3 + 38.6 / 2
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = (kKWDm + lead(kKWDm)) / 2)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = (lead(kKWDm)))
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = kKWDm + (lead(kKWDm)))
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = kKWDm + (lead(kKWDm)) / 2)
# Berechnung kumulierte Klimatische Wasserbilanzdefizit kKWDm
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = (kKWDm + (lead(kKWDm))) / 2)
# Denise + Tina:
load("data/MKWDv_v3_red.RData")
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
mutate(month_after = (kKWDm + (lead(kKWDm))) / 2)
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_split()
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
group_split() %>%
group_keys()
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
#group_split() %>%
group_keys()
MKWDv %>%
group_by(ID, JAHR) %>%
dplyr::mutate(kKWDm=cumsum(KWDm)) %>%
#mutate(month_after = (kKWDm + (lead(kKWDm))) / 2)
group_split() %>%
map_dfr(function(year_id){
year_id %>%
mutate(month_after = (kKWDm + (lead(kKWDm))) / 2)
})
